# 3 . 스프링 부트로 마이크로서비스 구축하기
아키텍트 
소프트웨어 개발자
데브옵스

# 3.1 마이크로서비스 아키텍처 설계
해결해야 할 문제의 작동모델을 제공

# 3.1.1 비즈니스 문제 분해
아키텍트는 비즈니스 문제를 각 활동 영역을 대표하는 덩어리로 분해하고 비즈니스 영역의 특정 부분과 연관된 비즈니스 규칙과 데이터 로직을 안에 은닉한다.

비즈니스 영역을 분해
비즈니스 문제를 기술하는 데 사용된 명사에 주목하라
동사에 주목하라
데이터 응집성을 찾아라 연관성 높은 데이터를 찾아야함

# 3.1.2 서비스 세분화 확정
주요 기능 부분을 서로 독립적으로 빌드하고 배포할 수 있는 완전한 자립형 유닛을 추출
유닛은 디비를 공유하거나 개별적으로 가질 수 있음
데이터 모델에서 서비스를 추출하는 것은 코드를 개별 프로젝트로 다시 패키징 하는 것 이상이 필요
이 추출 작업은 서비스가 액세스 하는 실제 데이터 베이스 테이블을 파악하고 특정 문제 영역의 테이블에만 액세스를 허용하는 것도 포함

마이크로 서비스는 광범위하게 시작하고 더 작은 서비스로 리팩터링 하는 것이 좋다.
서비스 간 교류하는 방식에 중점을 둔다.
문제 도메인에 이해가 깊어지면서 서비스 책임도 계속 변한다.

나쁜 마이크로서비스 징후
책임이 너무 많은 서비스, 다수 테이블에 걸쳐 데이터를 관리하는 서비스, 테스트가 너무 많은 서비스

작은 서비스는?
문제 도메인의 한 부분에 속한 마이크로서비스가 토끼처럼 번식한다.
마이크로서비스가 지나치게 상호 의존적이다.
마이크로서비스가 단순한 crud 서비스 집합이 된다.

# 3.1.3 서비스 인터페이스 설계
상호통신방식의 정의
rest철학을 수용하라
uri를 사용하여 의도를 전달하라
요청과 응답에 json을 사용하라
http 상태 코드로 결과를 전달하라

# 3.2 마이크로서비스를 사용하지 말아야 할 때

# 3.2.1 분산 시스템 구축의 복잡성
분산되고 세분화 되어 모놀리식 애플리케이션에서 없던 복잡성이 발생한다.
높은 운영 성숙도 필요
=> 자동화와 운영 작업에 기꺼이 투자해야함

# 3.2.2 서버 또는 컨테이너 스프롤
배포 모델은 컨테이너당 하나의 마이크로서비스 인스턴스를 배포하는 것

# 3.2.3 애플리케이션 타입
재사용성을 추구하며 고도의 회복성과 확장성이 필요한 대규모 애플리케이션을 구축하는 데 매우 유용

# 3.2.4 데이터 트랜잭션과 일관성
데이터 사용 패턴 -> 여러 데이터 소스에 걸쳐 복잡한 데이터를 집계하고 변환

# 3.3 개발자 이야기 : 스프링 부트와 자바
라이선싱 서비스 엔드포인트를 노출하도록 엔드포인트 매핑용 스프링 부트 컨트롤러 클래스 구현
타 언어 메세지를 적용할 수 있는 국제화 구현
사용자가 서버와 상호 작용할 수 있도록 충분한 정보를 제공하는 스프링 HATEOAS 구현

# 3.3.1 마이크로서비스의 출입구 만들기: 스프링 부트 컨트롤러
서비스의 엔드포인트를 노출하고 유입되는 http 요청 데이터를 요청을 처리할 자바 메소드를 매핑한다.
post get put delete 매핑되는 네개의 http 엔드포인트를 노출한다.

모든 서비스의 엔드포인트를 최상위 엔드포인트인
@RequestMapping(value=”v1/organiztion/{organizationId}/license) 시작

@RestController json xml 데이터 직렬화



